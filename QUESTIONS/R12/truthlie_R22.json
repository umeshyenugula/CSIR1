[
  {
    "id": 1,
    "code": "Identify the false statement in the following.",
    "options": [
      "In C, ++i and i++ both increase i by one.",
      "++i increments before the value is used, and i++ increments after.",
      "i++ increments i by two."
    ],
    "answer": "i++ increments i by two."
  },
  {
    "id": 2,
    "code": "Identify the false statement in the following.",
    "options": [
      "The switch statement can be used with int and char.",
      "A switch statement can directly handle floating-point values.",
      "Each case in switch should ideally end with break."
    ],
    "answer": "A switch statement can directly handle floating-point values."
  },
  {
    "id": 3,
    "code": "Identify the false statement in the following.",
    "options": [
      "const keyword makes a variableâ€™s value unchangeable.",
      "#define can be used to create macros in C.",
      "#define can be changed during runtime."
    ],
    "answer": "#define can be changed during runtime."
  },
  {
    "id": 4,
    "code": "Identify the false statement in the following.",
    "options": [
      "\\n represents a newline in C strings.",
      "\\t inserts a horizontal tab in strings.",
      "\\p is a valid escape sequence for printing pointers."
    ],
    "answer": "\\p is a valid escape sequence for printing pointers."
  },
  {
    "id": 5,
    "code": "Identify the false statement in the following.",
    "options": [
      "Functions in C can return only one value directly.",
      "Arrays can be passed as arguments to functions.",
      "C allows returning multiple values from a function without pointers."
    ],
    "answer": "C allows returning multiple values from a function without pointers."
  },
  {
    "id": 6,
    "code": "Identify the false statement in the following.",
    "options": [
      "The logical NOT operator in C is !.",
      "The bitwise NOT operator in C is ~.",
      "The operator <> checks if two values are not equal."
    ],
    "answer": "The operator <> checks if two values are not equal."
  },
  {
    "id": 7,
    "code": "Identify the false statement in the following.",
    "options": [
      "In C, static variables inside a function keep their value between calls.",
      "Global variables are accessible from any function in the same program file.",
      "Automatic variables retain their values after a function ends."
    ],
    "answer": "Automatic variables retain their values after a function ends."
  },
  {
    "id": 8,
    "code": "Identify the false statement in the following.",
    "options": [
      "The expression (x > y) ? x : y; returns the greater of two numbers.",
      "The ternary operator in C uses ? and :.",
      "The ternary operator can replace if statements in all cases."
    ],
    "answer": "The ternary operator can replace if statements in all cases."
  },
  {
    "id": 9,
    "code": "Identify the false statement in the following.",
    "options": [
      "& gives the address of a variable.",
      "* is used to declare a pointer.",
      "& is used to dereference a pointer."
    ],
    "answer": "& is used to dereference a pointer."
  },
  {
    "id": 10,
    "code": "Identify the false statement in the following.",
    "options": [
      "C supports both local and global scope for variables.",
      "Variables declared inside a block are local to that block.",
      "Global variables are automatically destroyed when a function ends."
    ],
    "answer": "Global variables are automatically destroyed when a function ends."
  }
]
